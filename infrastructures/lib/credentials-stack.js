"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialsStack = void 0;
const ssm = require("@aws-cdk/aws-ssm");
const cdk = require("@aws-cdk/core");
class CredentialsStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // import App Credentials
        const appPort = ssm.StringParameter.fromStringParameterAttributes(this, '/pickme/port', {
            parameterName: '/pickme/port',
            simpleName: false,
        });
        const appJwtSecret = ssm.StringParameter.fromSecureStringParameterAttributes(this, '/pickme/jwt_secret', { parameterName: '/pickme/jwt_secret', version: 1 });
        const appCredentials = {
            PORT: appPort.stringValue,
            JWT_SECRET: appJwtSecret,
        };
        // import S3 Credentials
        const s3BucketName = ssm.StringParameter.fromStringParameterAttributes(this, '/pickme/s3/bucket_name', {
            parameterName: '/pickme/s3/bucket_name',
            simpleName: false,
        });
        const s3AccessKeyId = ssm.StringParameter.fromSecureStringParameterAttributes(this, '/pickme/s3/access_key_id', { parameterName: '/pickme/s3/access_key_id', version: 1 });
        const s3SecretAccessKey = ssm.StringParameter.fromSecureStringParameterAttributes(this, '/pickme/s3/secret_access_key', { parameterName: '/pickme/s3/secret_access_key', version: 1 });
        const s3Credentials = {
            S3_BUCKET_NAME: s3BucketName.stringValue,
            ACCESS_KEY_ID: s3AccessKeyId,
            SECRET_ACCESS_KEY: s3SecretAccessKey,
        };
        this.pickmeCredentials = {
            appCredentials: appCredentials,
            s3Credentials: s3Credentials,
        };
    }
}
exports.CredentialsStack = CredentialsStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmVkZW50aWFscy1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBdUM7QUFDdkMscUNBQW9DO0FBa0JwQyxNQUFhLGdCQUFpQixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBRzdDLFlBQVksS0FBYyxFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM1RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUV2Qix5QkFBeUI7UUFDekIsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyw2QkFBNkIsQ0FDL0QsSUFBSSxFQUNKLGNBQWMsRUFDZDtZQUNFLGFBQWEsRUFBRSxjQUFjO1lBQzdCLFVBQVUsRUFBRSxLQUFLO1NBQ2xCLENBQ0YsQ0FBQTtRQUVELE1BQU0sWUFBWSxHQUNoQixHQUFHLENBQUMsZUFBZSxDQUFDLG1DQUFtQyxDQUNyRCxJQUFJLEVBQ0osb0JBQW9CLEVBQ3BCLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FDcEQsQ0FBQTtRQUVILE1BQU0sY0FBYyxHQUFtQjtZQUNyQyxJQUFJLEVBQUUsT0FBTyxDQUFDLFdBQVc7WUFDekIsVUFBVSxFQUFFLFlBQVk7U0FDekIsQ0FBQTtRQUVELHdCQUF3QjtRQUN4QixNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLDZCQUE2QixDQUNwRSxJQUFJLEVBQ0osd0JBQXdCLEVBQ3hCO1lBQ0UsYUFBYSxFQUFFLHdCQUF3QjtZQUN2QyxVQUFVLEVBQUUsS0FBSztTQUNsQixDQUNGLENBQUE7UUFFRCxNQUFNLGFBQWEsR0FDakIsR0FBRyxDQUFDLGVBQWUsQ0FBQyxtQ0FBbUMsQ0FDckQsSUFBSSxFQUNKLDBCQUEwQixFQUMxQixFQUFFLGFBQWEsRUFBRSwwQkFBMEIsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQzFELENBQUE7UUFFSCxNQUFNLGlCQUFpQixHQUNyQixHQUFHLENBQUMsZUFBZSxDQUFDLG1DQUFtQyxDQUNyRCxJQUFJLEVBQ0osOEJBQThCLEVBQzlCLEVBQUUsYUFBYSxFQUFFLDhCQUE4QixFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FDOUQsQ0FBQTtRQUVILE1BQU0sYUFBYSxHQUFrQjtZQUNuQyxjQUFjLEVBQUUsWUFBWSxDQUFDLFdBQVc7WUFDeEMsYUFBYSxFQUFFLGFBQWE7WUFDNUIsaUJBQWlCLEVBQUUsaUJBQWlCO1NBQ3JDLENBQUE7UUFFRCxJQUFJLENBQUMsaUJBQWlCLEdBQUc7WUFDdkIsY0FBYyxFQUFFLGNBQWM7WUFDOUIsYUFBYSxFQUFFLGFBQWE7U0FDN0IsQ0FBQTtJQUNILENBQUM7Q0FDRjtBQS9ERCw0Q0ErREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzc20gZnJvbSAnQGF3cy1jZGsvYXdzLXNzbSdcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFMzQ3JlZGVudGlhbHMge1xuICBTM19CVUNLRVRfTkFNRTogc3RyaW5nXG4gIEFDQ0VTU19LRVlfSUQ6IHNzbS5JU3RyaW5nUGFyYW1ldGVyXG4gIFNFQ1JFVF9BQ0NFU1NfS0VZOiBzc20uSVN0cmluZ1BhcmFtZXRlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcENyZWRlbnRpYWxzIHtcbiAgUE9SVDogc3RyaW5nXG4gIEpXVF9TRUNSRVQ6IHNzbS5JU3RyaW5nUGFyYW1ldGVyXG59XG5cbmludGVyZmFjZSBQaWNrbWVDcmVkZW50aWFscyB7XG4gIGFwcENyZWRlbnRpYWxzOiBBcHBDcmVkZW50aWFsc1xuICBzM0NyZWRlbnRpYWxzOiBTM0NyZWRlbnRpYWxzXG59XG5cbmV4cG9ydCBjbGFzcyBDcmVkZW50aWFsc1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgcmVhZG9ubHkgcGlja21lQ3JlZGVudGlhbHM6IFBpY2ttZUNyZWRlbnRpYWxzXG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKVxuXG4gICAgLy8gaW1wb3J0IEFwcCBDcmVkZW50aWFsc1xuICAgIGNvbnN0IGFwcFBvcnQgPSBzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TdHJpbmdQYXJhbWV0ZXJBdHRyaWJ1dGVzKFxuICAgICAgdGhpcyxcbiAgICAgICcvcGlja21lL3BvcnQnLFxuICAgICAge1xuICAgICAgICBwYXJhbWV0ZXJOYW1lOiAnL3BpY2ttZS9wb3J0JyxcbiAgICAgICAgc2ltcGxlTmFtZTogZmFsc2UsXG4gICAgICB9XG4gICAgKVxuXG4gICAgY29uc3QgYXBwSnd0U2VjcmV0ID1cbiAgICAgIHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVNlY3VyZVN0cmluZ1BhcmFtZXRlckF0dHJpYnV0ZXMoXG4gICAgICAgIHRoaXMsXG4gICAgICAgICcvcGlja21lL2p3dF9zZWNyZXQnLFxuICAgICAgICB7IHBhcmFtZXRlck5hbWU6ICcvcGlja21lL2p3dF9zZWNyZXQnLCB2ZXJzaW9uOiAxIH1cbiAgICAgIClcblxuICAgIGNvbnN0IGFwcENyZWRlbnRpYWxzOiBBcHBDcmVkZW50aWFscyA9IHtcbiAgICAgIFBPUlQ6IGFwcFBvcnQuc3RyaW5nVmFsdWUsXG4gICAgICBKV1RfU0VDUkVUOiBhcHBKd3RTZWNyZXQsXG4gICAgfVxuXG4gICAgLy8gaW1wb3J0IFMzIENyZWRlbnRpYWxzXG4gICAgY29uc3QgczNCdWNrZXROYW1lID0gc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyQXR0cmlidXRlcyhcbiAgICAgIHRoaXMsXG4gICAgICAnL3BpY2ttZS9zMy9idWNrZXRfbmFtZScsXG4gICAgICB7XG4gICAgICAgIHBhcmFtZXRlck5hbWU6ICcvcGlja21lL3MzL2J1Y2tldF9uYW1lJyxcbiAgICAgICAgc2ltcGxlTmFtZTogZmFsc2UsXG4gICAgICB9XG4gICAgKVxuXG4gICAgY29uc3QgczNBY2Nlc3NLZXlJZCA9XG4gICAgICBzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TZWN1cmVTdHJpbmdQYXJhbWV0ZXJBdHRyaWJ1dGVzKFxuICAgICAgICB0aGlzLFxuICAgICAgICAnL3BpY2ttZS9zMy9hY2Nlc3Nfa2V5X2lkJyxcbiAgICAgICAgeyBwYXJhbWV0ZXJOYW1lOiAnL3BpY2ttZS9zMy9hY2Nlc3Nfa2V5X2lkJywgdmVyc2lvbjogMSB9XG4gICAgICApXG5cbiAgICBjb25zdCBzM1NlY3JldEFjY2Vzc0tleSA9XG4gICAgICBzc20uU3RyaW5nUGFyYW1ldGVyLmZyb21TZWN1cmVTdHJpbmdQYXJhbWV0ZXJBdHRyaWJ1dGVzKFxuICAgICAgICB0aGlzLFxuICAgICAgICAnL3BpY2ttZS9zMy9zZWNyZXRfYWNjZXNzX2tleScsXG4gICAgICAgIHsgcGFyYW1ldGVyTmFtZTogJy9waWNrbWUvczMvc2VjcmV0X2FjY2Vzc19rZXknLCB2ZXJzaW9uOiAxIH1cbiAgICAgIClcblxuICAgIGNvbnN0IHMzQ3JlZGVudGlhbHM6IFMzQ3JlZGVudGlhbHMgPSB7XG4gICAgICBTM19CVUNLRVRfTkFNRTogczNCdWNrZXROYW1lLnN0cmluZ1ZhbHVlLFxuICAgICAgQUNDRVNTX0tFWV9JRDogczNBY2Nlc3NLZXlJZCxcbiAgICAgIFNFQ1JFVF9BQ0NFU1NfS0VZOiBzM1NlY3JldEFjY2Vzc0tleSxcbiAgICB9XG5cbiAgICB0aGlzLnBpY2ttZUNyZWRlbnRpYWxzID0ge1xuICAgICAgYXBwQ3JlZGVudGlhbHM6IGFwcENyZWRlbnRpYWxzLFxuICAgICAgczNDcmVkZW50aWFsczogczNDcmVkZW50aWFscyxcbiAgICB9XG4gIH1cbn1cbiJdfQ==